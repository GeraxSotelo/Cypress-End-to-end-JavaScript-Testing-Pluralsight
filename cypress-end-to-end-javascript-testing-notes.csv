"Note","Course","Module","Clip","Time in Clip","URL"
"Automated End-to-end Testing - Automated tests that test an application from start to finish, by simulating a real user scenario.","Cypress: End-to-end JavaScript Testing","Cypress - Fast, Easy, and Reliable Testing","What Is End-to-end Testing?","4:33","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=1f7a302d-9f80-42fb-9786-e38466503fc9&clip=1&mode=live&start=273&noteid=5fb89b10-c573-494e-9922-e896fc95e2d6"
"Add a triple slash directive to the head of the JS test file to enable intellisense when typing a cypress command","Cypress: End-to-end JavaScript Testing","Writing and Running Your First Tests","Write and Run First Tests","0:13","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=53e97f7e-0018-43bc-b87d-7ee07e0abad6&clip=4&mode=live&start=13&noteid=ee8eda44-296a-4e9b-bf9f-f8041b83dc38"
"The describe function is used to describe the test suite by giving it a unique name","Cypress: End-to-end JavaScript Testing","Writing and Running Your First Tests","Write and Run First Tests","0:48","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=53e97f7e-0018-43bc-b87d-7ee07e0abad6&clip=4&mode=live&start=48&noteid=bfa356ff-38f8-4f4a-833d-3003ead48265"
"Use the 'it' function to give a name to a test","Cypress: End-to-end JavaScript Testing","Writing and Running Your First Tests","Write and Run First Tests","1:04","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=53e97f7e-0018-43bc-b87d-7ee07e0abad6&clip=4&mode=live&start=64&noteid=fbddedaa-0c3f-4226-8b6a-610872e7ee1d"
"Use time travel to go back and see every state of the app while the test was running.","Cypress: End-to-end JavaScript Testing","Writing and Running Your First Tests","Write and Run First Tests","2:20","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=53e97f7e-0018-43bc-b87d-7ee07e0abad6&clip=4&mode=live&start=140&noteid=986d62f1-06af-48fa-9cae-d40b799f9883"
"Use the cy.contains() function to get the DOM element containing certain text","Cypress: End-to-end JavaScript Testing","Writing and Running Your First Tests","Write and Run First Tests","3:19","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=53e97f7e-0018-43bc-b87d-7ee07e0abad6&clip=4&mode=live&start=199&noteid=08ddbe1c-73a6-498a-b23e-5b60c26c721e"
"Use the click() function to click on an element that Cypress found","Cypress: End-to-end JavaScript Testing","Writing and Running Your First Tests","Write and Run First Tests","3:48","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=53e97f7e-0018-43bc-b87d-7ee07e0abad6&clip=4&mode=live&start=228&noteid=0d983733-52f5-4861-9a51-7924b1ec839a"
"To access the fixtures folder, use the cy.fixture command in Cypress to use it elsewhere in your test. Typically, you would use them for stubbing the network requests in your test","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Organizing Tests","0:49","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=1&mode=live&start=49&noteid=a16c4fe7-11c5-4434-aa4d-9c440d6602fc"
"The integration folder is where all the test files go","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Organizing Tests","1:06","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=1&mode=live&start=66&noteid=68309495-fd66-4452-b4db-fb3d8160c490"
"The plugin folder","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Organizing Tests","1:20","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=1&mode=live&start=80&noteid=7c8ade35-d8c3-488a-b7e6-2f6b3361f133"
"The support folder is a good place to put any reusable code like custom commands, global overrides, and so on, so you can reuse them across several tests","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Organizing Tests","1:47","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=1&mode=live&start=107&noteid=962eb63d-6b81-43bf-982c-d33b57d15d96"
"The readme file in the cypress folder summarizes the folder structure that Cypress comes with.","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Organizing Tests","2:07","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=1&mode=live&start=127&noteid=e4c5ad85-ff54-477c-ba9a-27b3d1cf80d5"
"Parent commands begin a new chain of Cypress commands and cannot be used again in the chain","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Interacting with Elements","0:47","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=2&mode=live&start=47&noteid=636cca74-8d87-4222-bebb-e8f2c5d9d0e3"
"cy.get() is used to get an element from the ui","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Interacting with Elements","1:16","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=2&mode=live&start=76&noteid=db35cc1a-1114-440e-99ff-777693dd38a1"
"cy.request() is used to make an HTTP request. You can send requests with specific methods like 'get', 'post' and so on. By default, Cypress uses 'get' as the method when no method is provided.","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Interacting with Elements","1:23","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=2&mode=live&start=83&noteid=76eda8c4-2f30-4ba2-ad11-bb847db52827"
"cy.exec() is used to execute a system command ","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Interacting with Elements","1:46","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=2&mode=live&start=106&noteid=9ebc4c0f-e054-40d1-92de-b09a8064a550"
"cy.route() is used to manage the behavior of a network request","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Interacting with Elements","1:52","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=2&mode=live&start=112&noteid=72182803-7a37-41de-b7bc-f682525f6656"
"Child commands can be chained off a parent command, or another child command","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Interacting with Elements","2:15","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=2&mode=live&start=135&noteid=34854a1a-5ef5-4329-9048-31f53e73a38c"
"The should command uses an assertion","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Interacting with Elements","3:26","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=2&mode=live&start=206&noteid=049e334c-de86-40b0-aebb-0387a8f35862"
"Dual commands can act as a parent or a child, depending on the test. They can either start a chain or be chained off an existing one","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Interacting with Elements","3:39","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=2&mode=live&start=219&noteid=ce0a92eb-e758-4611-b1a8-d08908a62625"
"Cypress doesn't recommend selecting elements by their class names because the styling can change any time.","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Interacting with Elements","4:42","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=2&mode=live&start=282&noteid=1645833e-93ab-4bb3-ad37-e7e71488892b"
"Cypress doesn't recommend selecting elements by the element type because it is too generic an there can be more than one.","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Interacting with Elements","4:52","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=2&mode=live&start=292&noteid=0e26579c-7e26-4146-a77d-a81a5214284a"
"The data-cy="""" attribute is basically the best way to uniquely identify elements. You can add it to your front end code as much as possible across different components and UI pieces.","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Interacting with Elements","5:42","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=2&mode=live&start=342&noteid=d4401d9e-de93-4111-9d48-2da4ecfbc527"
"Adding the data-cy="""" attribute to an element gives us a targeted selector that's only used for testing.","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Interacting with Elements","6:09","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=2&mode=live&start=369&noteid=da5153e9-fbb8-4fda-953e-483071da9971"
"Cypress provides assertions from popular libraries like Chai, SInon and jQuery.","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Assertions","0:03","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=5&mode=live&start=3&noteid=6a30576b-3537-409f-83ec-4be4ad7a2757"
"'be.visible' assertion","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Assertions","1:29","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=5&mode=live&start=89&noteid=d041eb8f-2f42-4d36-b632-8ef6f36ef8fe"
"When using a callback function with .should(), there is special logic to rerun the callback function until no assertions throw within it. Cypress will automatically retry the callback function until it passes or the command times out","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Assertions","1:48","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=5&mode=live&start=108&noteid=5d7776b1-3c45-4d32-8b0a-066499679ec6"
"'equal' assertion","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Assertions","2:07","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=5&mode=live&start=127&noteid=d753fa92-dd72-451f-aeb6-1f66bf44e39b"
"'have.length' assertion","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Assertions","2:19","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=5&mode=live&start=139&noteid=8b38dd98-d3a0-4893-9493-2d93d0182223"
"'not.exist' assertion","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Assertions","2:33","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=5&mode=live&start=153&noteid=f29e8b16-97ec-4fb0-818a-1cdc114adaa1"
"Use assertion 'should' with 'cy.location' and 'pathname' to check for proper url navigation","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Assertions Demo","0:32","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=6&mode=live&start=32&noteid=de09146d-0efc-4daa-9c4f-98edb0a2c7ee"
"Use 'cy.contains' and assertion 'should' with 'have.class' or 'not.have.class'","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Assertions Demo","2:59","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=6&mode=live&start=179&noteid=447d12e0-6539-4c0c-8a4b-7b62ff7ea749"
"beforeEach() hook in Cypress, runs before each test in a given block.","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Test New Post Workflow","1:02","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=7&mode=live&start=62&noteid=3c6636de-5bea-4f62-8d78-786568affa2d"
"cleanDatabase() function in 'plugins' folder.","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Test New Post Workflow","1:25","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=7&mode=live&start=85&noteid=fdc60298-73e5-4cf4-baa2-156cb02a2ee4"
"Custom Cypress commands in 'support' folder","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Test New Post Workflow","1:47","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=7&mode=live&start=107&noteid=fd39cdfe-2591-4045-b98f-251e05d9927c"
"Cypress commands and assertions are smart enough to wait for an application to update while running a test.","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Cypress Retry-ability","0:48","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=8&mode=live&start=48&noteid=a62538e1-7baf-4b00-9c98-a16257c12b10"
"If an assertion following a DOM query command fails, Cypress doesn't immediately fail the test. It knows the asynchronous nature of applications and it keeps retrying until it reaches a set timeout. No hardcoding of waits needed in code.","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Cypress Retry-ability","0:56","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=8&mode=live&start=56&noteid=fc0c489b-df56-4d9c-987d-0d95b1630e18"
"Cypress does not retry every command. It only retries commands that query the DOM","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Cypress Retry-ability","1:37","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=8&mode=live&start=97&noteid=95d86781-c8a1-4013-908d-ca162b675080"
"If you have a chain of commands, only the last command  before an assertion is retried","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Cypress Retry-ability","2:15","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=8&mode=live&start=135&noteid=ef38326e-f6c5-4fb1-8ca7-5391fc83db0d"
"'should' assertion with 'have.length'","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Cypress Retry-ability","4:48","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=8&mode=live&start=288&noteid=fa4dbdb2-89bc-4de9-8109-70916b02a2a6"
"first() finds the first DOM element. first() is a child command and can never start a Cypress chain.","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Cypress Retry-ability","5:04","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=8&mode=live&start=304&noteid=15146290-2255-4260-a63c-9a8b7586727a"
"Anytime you run a test and see the blue 'ASSERT' it means Cypress is retrying","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Cypress Retry-ability","6:40","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=8&mode=live&start=400&noteid=c7786dd6-ea2e-46be-a193-a34155e8fbd2"
"Place certain aliases in the beforeEach() hook because it runs before each test, so the aliases will be defined for each test and the tests can reference them.","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Aliases","1:37","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=9&mode=live&start=97&noteid=1b0e8f00-7fce-4081-af4d-be85487740d9"
"Do not create state changing aliases within beforeEach() hook","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Aliases","2:05","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=9&mode=live&start=125&noteid=a6f5c589-299d-4f62-b876-981e3c1df006"
"When you use the as() command to define aliases, you can use the '@' command to reference them, but you can only do that with cy.get() or cy.wait()","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Aliases","2:46","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=9&mode=live&start=166&noteid=814d444d-26c3-46fd-b565-1453ff21d20e"
"You can define aliases within a test and reference them within the test if you have a lengthy test.","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Aliases","3:31","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=9&mode=live&start=211&noteid=4fd4d36a-12e1-4d77-9726-85c7d0093f53"
"Ensure to define the aliases in the beforeEach() hook, not the before() hook because the before() hook only runs one time before running all the tests","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Aliases","3:38","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=9&mode=live&start=218&noteid=a3772120-61e5-4ac2-ae95-8f3c1582dc17"
"You can also alias a route just like you would a DOM element using the as() command. Then you can use the cy.wait() command to wait for the aliased route","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Aliases","5:15","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=9&mode=live&start=315&noteid=19eec816-5b44-4ece-a439-65efb1a55b91"
"In the approach where you don't stub responses, you directly hit the server and wait for a response back from the server. This accomplishes a true end-to-end test that test all the layers of your code, both client and server.","Cypress: End-to-end JavaScript Testing","Cypress Ecosystem and Tooling","Testing Network Requests","0:22","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4f48db2a-edcc-4b4a-abe4-3a183892a30d&clip=1&mode=live&start=22&noteid=86eb0e74-1946-455c-815d-21f8d323e8b8"
"y","Cypress: End-to-end JavaScript Testing","Cypress Ecosystem and Tooling","Testing Network Requests","1:13","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4f48db2a-edcc-4b4a-abe4-3a183892a30d&clip=1&mode=live&start=73&noteid=218516d2-0930-4a45-bafe-c7857a3c8167"
"In the approach where you do stub responses, the test defines a response which is stubbed instead of actually hitting a server and waiting for a response. You can control the response including the body, status, headers, even a custom delay.","Cypress: End-to-end JavaScript Testing","Cypress Ecosystem and Tooling","Testing Network Requests","1:20","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4f48db2a-edcc-4b4a-abe4-3a183892a30d&clip=1&mode=live&start=80&noteid=7c87b44f-4004-4371-a7e6-4efd0dd1019b"
"Cypress recommends using stubbed responses for network requests but not for server side rendering architecture","Cypress: End-to-end JavaScript Testing","Cypress Ecosystem and Tooling","Testing Network Requests","2:06","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4f48db2a-edcc-4b4a-abe4-3a183892a30d&clip=1&mode=live&start=126&noteid=57765534-3171-41a2-b60b-b948287d2e2b"
"Avoid stubs for critical paths like Login","Cypress: End-to-end JavaScript Testing","Cypress Ecosystem and Tooling","Testing Network Requests","2:35","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4f48db2a-edcc-4b4a-abe4-3a183892a30d&clip=1&mode=live&start=155&noteid=97a99ade-85de-4ccb-abfb-529a489bacaa"
"cy.server() is used to start a server to begin routing responses to cy.route() and to change the behavior of your network requests. You won't need it if you decide to directly hit the server and get a response from the server.","Cypress: End-to-end JavaScript Testing","Cypress Ecosystem and Tooling","Testing Network Requests","2:53","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4f48db2a-edcc-4b4a-abe4-3a183892a30d&clip=1&mode=live&start=173&noteid=9c869dc1-d728-4ae8-a02f-5afd5d583df6"
"cy.route(url) is used to manage the behavior of the network request and you can pass the response within the cy.route() command","Cypress: End-to-end JavaScript Testing","Cypress Ecosystem and Tooling","Testing Network Requests","3:13","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4f48db2a-edcc-4b4a-abe4-3a183892a30d&clip=1&mode=live&start=193&noteid=c7de1459-0418-495f-a337-f3aaf8e6d9da"
"cy.request(url) makes an http request directly to the server and this can be used if you don't want to stub your responses","Cypress: End-to-end JavaScript Testing","Cypress Ecosystem and Tooling","Testing Network Requests","3:25","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4f48db2a-edcc-4b4a-abe4-3a183892a30d&clip=1&mode=live&start=205&noteid=872964b9-f7dd-4416-a493-2e00b11171d9"
"Without a response being passed into the cy.route() command, Cypress will pass the request, without stubbing, to the server","Cypress: End-to-end JavaScript Testing","Cypress Ecosystem and Tooling","Testing Network Requests","4:08","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4f48db2a-edcc-4b4a-abe4-3a183892a30d&clip=1&mode=live&start=248&noteid=58dd2726-f3b7-48d7-950f-e04e93eda835"
"In cy.route(), passing in a url and a JSON response in square brackets, Cypress will stub the response as if the server returned a response, so it doesn't wait for the server to give back a response.","Cypress: End-to-end JavaScript Testing","Cypress Ecosystem and Tooling","Testing Network Requests","4:35","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4f48db2a-edcc-4b4a-abe4-3a183892a30d&clip=1&mode=live&start=275&noteid=ae0a3c5e-5e1d-408b-86ee-9125bce6dd41"
"cy.route() can also make calls where you send an empty response. This is useful when you're trying to mimic a 'delete' scenario","Cypress: End-to-end JavaScript Testing","Cypress Ecosystem and Tooling","Testing Network Requests","5:20","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4f48db2a-edcc-4b4a-abe4-3a183892a30d&clip=1&mode=live&start=320&noteid=73611130-6210-45cb-b93b-97fe5779257a"
"cy.screenshot() will ensure Cypress takes a screenshot at that moment while it's running the test. It can be a parent or a child command()","Cypress: End-to-end JavaScript Testing","Cypress Ecosystem and Tooling","Screenshots and Videos","0:29","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4f48db2a-edcc-4b4a-abe4-3a183892a30d&clip=3&mode=live&start=29&noteid=be2a0dad-2038-4789-8ad3-676c8ebf1f13"
"When running Cypress tests from the command line instead of the Cypress test runner, Cypress automatically takes screenshots of tests that have failed. It also records a video of each test","Cypress: End-to-end JavaScript Testing","Cypress Ecosystem and Tooling","Screenshots and Videos","2:47","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4f48db2a-edcc-4b4a-abe4-3a183892a30d&clip=3&mode=live&start=167&noteid=af6b4a57-73fe-4394-91a7-23b0de7b2870"
"You can turn off recording videos in cypress.json file","Cypress: End-to-end JavaScript Testing","Cypress Ecosystem and Tooling","Screenshots and Videos","4:31","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4f48db2a-edcc-4b4a-abe4-3a183892a30d&clip=3&mode=live&start=271&noteid=acf98b30-cf16-4985-b457-50e9b3cbdae5"
"You can turn off taking screenshots of failed tests in 'index.js' file in the 'support' folder","Cypress: End-to-end JavaScript Testing","Cypress Ecosystem and Tooling","Screenshots and Videos","5:10","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4f48db2a-edcc-4b4a-abe4-3a183892a30d&clip=3&mode=live&start=310&noteid=53cc29e4-48ec-4c8b-aea5-54f5acb3114f"
"If you want to run your Cypress test from the browser, you can use you can use the Cypress run command and specifically give the browser name within the command (cypress run --browser chrome)","Cypress: End-to-end JavaScript Testing","Cypress Ecosystem and Tooling","Browser Support","2:05","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4f48db2a-edcc-4b4a-abe4-3a183892a30d&clip=4&mode=live&start=125&noteid=bdd90de9-09e5-43c0-9eea-3315bc204a19"
"import '@cypress/code-coverage/support'","Cypress: End-to-end JavaScript Testing","Cypress Ecosystem and Tooling","Code Coverage","0:59","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4f48db2a-edcc-4b4a-abe4-3a183892a30d&clip=5&mode=live&start=59&noteid=13861fa7-97e5-4245-876d-9bffd4d1c273"
"https://docs.cypress.io/plugins/","Cypress: End-to-end JavaScript Testing","Cypress Ecosystem and Tooling","Plugins","2:43","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4f48db2a-edcc-4b4a-abe4-3a183892a30d&clip=6&mode=live&start=163&noteid=c39bbe47-f9d7-48b3-8190-256dea04745b"