"Note","Course","Module","Clip","Time in Clip","URL"
"Automated End-to-end Testing - Automated tests that test an application from start to finish, by simulating a real user scenario.","Cypress: End-to-end JavaScript Testing","Cypress - Fast, Easy, and Reliable Testing","What Is End-to-end Testing?","4:33","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=1f7a302d-9f80-42fb-9786-e38466503fc9&clip=1&mode=live&start=273&noteid=5fb89b10-c573-494e-9922-e896fc95e2d6"
"Add a triple slash directive to the head of the JS test file to enable intellisense when typing a cypress command","Cypress: End-to-end JavaScript Testing","Writing and Running Your First Tests","Write and Run First Tests","0:13","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=53e97f7e-0018-43bc-b87d-7ee07e0abad6&clip=4&mode=live&start=13&noteid=ee8eda44-296a-4e9b-bf9f-f8041b83dc38"
"The describe function is used to describe the test suite by giving it a unique name","Cypress: End-to-end JavaScript Testing","Writing and Running Your First Tests","Write and Run First Tests","0:48","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=53e97f7e-0018-43bc-b87d-7ee07e0abad6&clip=4&mode=live&start=48&noteid=bfa356ff-38f8-4f4a-833d-3003ead48265"
"Use the 'it' function to give a name to a test","Cypress: End-to-end JavaScript Testing","Writing and Running Your First Tests","Write and Run First Tests","1:04","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=53e97f7e-0018-43bc-b87d-7ee07e0abad6&clip=4&mode=live&start=64&noteid=fbddedaa-0c3f-4226-8b6a-610872e7ee1d"
"Use time travel to go back and see every state of the app while the test was running.","Cypress: End-to-end JavaScript Testing","Writing and Running Your First Tests","Write and Run First Tests","2:20","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=53e97f7e-0018-43bc-b87d-7ee07e0abad6&clip=4&mode=live&start=140&noteid=986d62f1-06af-48fa-9cae-d40b799f9883"
"Use the cy.contains() function to get the DOM element containing certain text","Cypress: End-to-end JavaScript Testing","Writing and Running Your First Tests","Write and Run First Tests","3:19","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=53e97f7e-0018-43bc-b87d-7ee07e0abad6&clip=4&mode=live&start=199&noteid=08ddbe1c-73a6-498a-b23e-5b60c26c721e"
"Use the click() function to click on an element that Cypress found","Cypress: End-to-end JavaScript Testing","Writing and Running Your First Tests","Write and Run First Tests","3:48","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=53e97f7e-0018-43bc-b87d-7ee07e0abad6&clip=4&mode=live&start=228&noteid=0d983733-52f5-4861-9a51-7924b1ec839a"
"To access the fixtures folder, use the cy.fixture command in Cypress to use it elsewhere in your test. Typically, you would use them for stubbing the network requests in your test","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Organizing Tests","0:49","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=1&mode=live&start=49&noteid=a16c4fe7-11c5-4434-aa4d-9c440d6602fc"
"The integration folder is where all the test files go","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Organizing Tests","1:06","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=1&mode=live&start=66&noteid=68309495-fd66-4452-b4db-fb3d8160c490"
"The plugin folder","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Organizing Tests","1:20","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=1&mode=live&start=80&noteid=7c8ade35-d8c3-488a-b7e6-2f6b3361f133"
"The support folder is a good place to put any reusable code like custom commands, global overrides, and so on, so you can reuse them across several tests","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Organizing Tests","1:47","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=1&mode=live&start=107&noteid=962eb63d-6b81-43bf-982c-d33b57d15d96"
"The readme file in the cypress folder summarizes the folder structure that Cypress comes with.","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Organizing Tests","2:07","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=1&mode=live&start=127&noteid=e4c5ad85-ff54-477c-ba9a-27b3d1cf80d5"
"Parent commands begin a new chain of Cypress commands and cannot be used again in the chain","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Interacting with Elements","0:47","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=2&mode=live&start=47&noteid=636cca74-8d87-4222-bebb-e8f2c5d9d0e3"
"cy.get() is used to get an element from the ui","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Interacting with Elements","1:16","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=2&mode=live&start=76&noteid=db35cc1a-1114-440e-99ff-777693dd38a1"
"cy.request() is used to make an HTTP request. You can send requests with specific methods like 'get', 'post' and so on. By default, Cypress uses 'get' as the method when no method is provided.","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Interacting with Elements","1:23","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=2&mode=live&start=83&noteid=76eda8c4-2f30-4ba2-ad11-bb847db52827"
"cy.exec() is used to execute a system command ","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Interacting with Elements","1:46","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=2&mode=live&start=106&noteid=9ebc4c0f-e054-40d1-92de-b09a8064a550"
"cy.route() is used to manage the behavior of a network request","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Interacting with Elements","1:52","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=2&mode=live&start=112&noteid=72182803-7a37-41de-b7bc-f682525f6656"
"Child commands can be chained off a parent command, or another child command","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Interacting with Elements","2:15","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=2&mode=live&start=135&noteid=34854a1a-5ef5-4329-9048-31f53e73a38c"
"The should command uses an assertion","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Interacting with Elements","3:26","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=2&mode=live&start=206&noteid=049e334c-de86-40b0-aebb-0387a8f35862"
"Dual commands can act as a parent or a child, depending on the test. They can either start a chain or be chained off an existing one","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Interacting with Elements","3:39","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=2&mode=live&start=219&noteid=ce0a92eb-e758-4611-b1a8-d08908a62625"
"Cypress doesn't recommend selecting elements by their class names because the styling can change any time.","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Interacting with Elements","4:42","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=2&mode=live&start=282&noteid=1645833e-93ab-4bb3-ad37-e7e71488892b"
"Cypress doesn't recommend selecting elements by the element type because it is too generic an there can be more than one.","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Interacting with Elements","4:52","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=2&mode=live&start=292&noteid=0e26579c-7e26-4146-a77d-a81a5214284a"
"The data-cy="""" attribute is basically the best way to uniquely identify elements. You can add it to your front end code as much as possible across different components and UI pieces.","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Interacting with Elements","5:42","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=2&mode=live&start=342&noteid=d4401d9e-de93-4111-9d48-2da4ecfbc527"
"Adding the data-cy="""" attribute to an element gives us a targeted selector that's only used for testing.","Cypress: End-to-end JavaScript Testing","Cypress Core Concepts","Interacting with Elements","6:09","https://app.pluralsight.com/player?course=cypress-end-to-end-javascript-testing&author=adhithi-ravichandran&name=4ec78c4b-7198-4b6b-be05-fa5a43d76f28&clip=2&mode=live&start=369&noteid=da5153e9-fbb8-4fda-953e-483071da9971"